// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.nekopiano.scala.scalaxb.y.items

/** An AtomicType represents a simple java object. (The name 'atomic' just means 'non-composed' objects.)
*/
case class AtomictypeType(classValue: String,
  autocreate: Boolean,
  generate: Boolean,
  extendsValue: Option[String] = None)


/** 
				Defines a list of atomic types.
			
*/
case class AtomictypesType(atomictype: com.nekopiano.scala.scalaxb.y.items.AtomictypeType*)

trait Type

object Type {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Type = value match {
    case "set" => SetType
    case "list" => ListType
    case "collection" => Collection

  }
}

case object SetType extends Type { override def toString = "set" }
case object ListType extends Type { override def toString = "list" }
case object Collection extends Type { override def toString = "collection" }


/** A CollectionType defines a collection of typed elements. Attention: If using a collection type for persistent attributes (not jalo) you can not search on that attribute and you are limited in size of collection. Consider to use a relation instead.
*/
case class CollectiontypeType(code: String,
  elementtype: String,
  autocreate: Boolean,
  generate: Boolean,
  typeValue: com.nekopiano.scala.scalaxb.y.items.Type)


/** 
				Defines a list of collection types.
			
*/
case class CollectiontypesType(collectiontype: com.nekopiano.scala.scalaxb.y.items.CollectiontypeType*)


/** A deployment defines how a (generic) item or relation is mapped onto the database.
*/
case class DeploymentType(table: String,
  typecode: Short,
  propertytable: Option[String] = None)


/** A RelationType defines a n-m or 1-n relation between types.
*/
case class RelationType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  code: String,
  localized: Boolean,
  deployment: Option[String] = None,
  autocreate: Boolean,
  generate: Boolean)


/** 
				Defines a list of relation types.
			
*/
case class RelationsType(relation: com.nekopiano.scala.scalaxb.y.items.RelationType*)

trait Cardinality

object Cardinality {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Cardinality = value match {
    case "one" => One
    case "many" => Many

  }
}

case object One extends Cardinality { override def toString = "one" }
case object Many extends Cardinality { override def toString = "many" }

trait Collectiontype

object Collectiontype {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): Collectiontype = value match {
    case "set" => SetTypeValue
    case "list" => ListTypeValue
    case "collection" => CollectionValue

  }
}

case object SetTypeValue extends Collectiontype { override def toString = "set" }
case object ListTypeValue extends Collectiontype { override def toString = "list" }
case object CollectionValue extends Collectiontype { override def toString = "collection" }


/** Configures the generated attribute at one relation end.
*/
case class RelationElementType(description: Option[String] = None,
  modifiers: Option[com.nekopiano.scala.scalaxb.y.items.ModifiersType] = None,
  model: Option[com.nekopiano.scala.scalaxb.y.items.AttributeModelType] = None,
  customu45properties: Option[com.nekopiano.scala.scalaxb.y.items.CustomPropertiesType] = None,
  typeValue: String,
  qualifier: Option[String] = None,
  metatype: Option[String] = None,
  cardinality: Option[com.nekopiano.scala.scalaxb.y.items.Cardinality] = None,
  navigable: Option[Boolean] = None,
  collectiontype: Option[com.nekopiano.scala.scalaxb.y.items.Collectiontype] = None,
  ordered: Option[Boolean] = None)


/** An EnumerationType defines fixed value types. (The typesystem provides item enumeration only)
*/
case class EnumtypeType(description: Option[String] = None,
  model: Option[com.nekopiano.scala.scalaxb.y.items.EnumModelType] = None,
  value: Seq[com.nekopiano.scala.scalaxb.y.items.EnumValueType] = Nil,
  code: String,
  autocreate: Boolean,
  generate: Boolean,
  jaloclass: Option[String] = None,
  dynamic: Option[Boolean] = None)


/** 
				Defines a list of enumeration types.
			
*/
case class EnumtypesType(enumtype: com.nekopiano.scala.scalaxb.y.items.EnumtypeType*)


/** Configures a database index for enclosing type.
*/
case class IndexType(key: Seq[com.nekopiano.scala.scalaxb.y.items.IndexKeyType] = Nil,
  name: String,
  remove: Boolean,
  replace: Boolean,
  unique: Option[Boolean] = None)


/** Configures a single index key.
*/
case class IndexKeyType(attribute: String,
  lower: Option[Boolean] = None)


/** Defines an attribute of a type.
*/
case class AttributeType(defaultvalue: Option[String] = None,
  description: Option[String] = None,
  persistence: Option[com.nekopiano.scala.scalaxb.y.items.PersistenceType] = None,
  modifiers: Option[com.nekopiano.scala.scalaxb.y.items.ModifiersType] = None,
  customu45properties: Option[com.nekopiano.scala.scalaxb.y.items.CustomPropertiesType] = None,
  model: Option[com.nekopiano.scala.scalaxb.y.items.AttributeModelType] = None,
  redeclare: Option[Boolean] = None,
  qualifier: String,
  typeValue: String,
  metatype: Option[String] = None,
  autocreate: Boolean,
  generate: Boolean,
  isSelectionOf: Option[String] = None)

trait AttributeTypeAll

/** Allows to configure model generation for this attribute used at servicelayer.
*/
case class AttributeModelType(getter: Seq[com.nekopiano.scala.scalaxb.y.items.ModelMethodType] = Nil,
  setter: Seq[com.nekopiano.scala.scalaxb.y.items.ModelMethodType] = Nil,
  generate: Boolean)


/** Allows to configure model generation for this item used at servicelayer.
*/
case class ItemModelType(constructor: Seq[com.nekopiano.scala.scalaxb.y.items.ModelConstructorType] = Nil,
  generate: Boolean)


/** Allows to configure model constructor signatures.
*/
case class ModelConstructorType(signature: String)


/** Allows to configure alternative methods at generated model.
*/
case class ModelMethodType(name: String,
  deprecated: Boolean,
  default: Boolean)


/** Defines custom properties.
*/
case class CustomPropertiesType(property: com.nekopiano.scala.scalaxb.y.items.CustomPropertyType*)


/** Defines a custom property.
*/
case class CustomPropertyType(value: String,
  name: String)


/** Configures a list of attributes.
*/
case class AttributesType(attribute: com.nekopiano.scala.scalaxb.y.items.AttributeType*)


/** Configures a list of indexes.
*/
case class IndexesType(index: com.nekopiano.scala.scalaxb.y.items.IndexType*)


/** Specifies a specific ComposedType.
*/
case class ItemtypeType(mixed: Seq[scalaxb.DataRecord[Any]] = Nil,
  code: String,
  extendsValue: Option[String] = None,
  jaloclass: Option[String] = None,
  deployment: Option[String] = None,
  singleton: Option[Boolean] = None,
  jaloonly: Option[Boolean] = None,
  autocreate: Boolean,
  generate: Boolean,
  abstractValue: Option[Boolean] = None,
  metatype: Option[String] = None)


/** Defines a grouping of item types.
*/
case class ItemtypesType(itemtype: Seq[com.nekopiano.scala.scalaxb.y.items.ItemtypeType] = Nil,
  typegroup: Seq[com.nekopiano.scala.scalaxb.y.items.TypeGroupType] = Nil)


case class TypeGroupType(itemtype: Seq[com.nekopiano.scala.scalaxb.y.items.ItemtypeType] = Nil,
  name: Option[String] = None)


case class Items(atomictypes: Option[com.nekopiano.scala.scalaxb.y.items.AtomictypesType] = None,
  collectiontypes: Option[com.nekopiano.scala.scalaxb.y.items.CollectiontypesType] = None,
  enumtypes: Option[com.nekopiano.scala.scalaxb.y.items.EnumtypesType] = None,
  maptypes: Option[com.nekopiano.scala.scalaxb.y.items.MaptypesType] = None,
  relations: Option[com.nekopiano.scala.scalaxb.y.items.RelationsType] = None,
  itemtypes: Option[com.nekopiano.scala.scalaxb.y.items.ItemtypesType] = None)


/** Like the java collection framework, a type, which defines map objects. Attention: When used as type for an attribute, the attribute will not be searchable and the access performance is not effective. Consider to use a relation.
*/
case class MaptypeType(code: String,
  argumenttype: String,
  returntype: String,
  autocreate: Boolean,
  generate: Boolean,
  redeclare: Option[Boolean] = None)


/** Specifies a list of map types.
*/
case class MaptypesType(maptype: com.nekopiano.scala.scalaxb.y.items.MaptypeType*)


/** Specifies further properties of an attribute which can be redeclared at other extensions.
*/
case class ModifiersType(read: Option[Boolean] = None,
  write: Option[Boolean] = None,
  search: Option[Boolean] = None,
  optional: Option[Boolean] = None,
  privateValue: Option[Boolean] = None,
  initial: Option[Boolean] = None,
  removable: Option[Boolean] = None,
  partof: Option[Boolean] = None,
  unique: Option[Boolean] = None,
  dontOptimize: Option[Boolean] = None,
  encrypted: Option[Boolean] = None)

trait TypeType

object TypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TypeType = value match {
    case "property" => Property
    case "jalo" => Jalo
    case "cmp" => Cmp
    case "dynamic" => Dynamic

  }
}

case object Property extends TypeType { override def toString = "property" }
case object Jalo extends TypeType { override def toString = "jalo" }
case object Cmp extends TypeType { override def toString = "cmp" }
case object Dynamic extends TypeType { override def toString = "dynamic" }


/** Defines how the values of the attribute will be stored. Possible values: 'cmp' (deprecated), 'jalo' (not persistent), and 'property' (persistent).
*/
case class PersistenceType(columntype: Seq[com.nekopiano.scala.scalaxb.y.items.ColumntypeType] = Nil,
  typeValue: com.nekopiano.scala.scalaxb.y.items.TypeType,
  qualifier: Option[String] = None,
  attributeHandler: Option[String] = None)


/** Configures a persistence definition for a specific database.
*/
case class ColumntypeType(value: String,
  database: Option[String] = None)


/** Configures a single element.
*/
case class ValueType(code: String)


/** Configures a single enum model pojo.
*/
case class EnumModelType(packageValue: Option[String] = None)


/** Configures a single enum value.
*/
case class EnumValueType(description: Option[String] = None,
  code: String)

